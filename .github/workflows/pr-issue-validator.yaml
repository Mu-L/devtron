name: Validate Pull Request

on:
  pull_request:
    types:
      - opened
      - synchronize
      - edited
      - reopened
    branches:    
      - 'main'
      - 'release-**'
    # paths-ignore:
    #   - 'docs/**'
    #   - '.github/'
    #   - 'CHANGELOG/'
    #   - 'charts/'
    #   - 'manifests/'
    #   - 'sample-docker-templates/'
  
jobs:
  change-target-branch:
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.GIT_TOKEN }}

    - name: Change Target Branch
      run: |
        # Set the new target branch name
        echo $GITHUB_REF
        PR_DATA=$(curl -s -H "Authorization: Bearer ${TOKEN}" \
            "https://api.github.com/repos/${GITHUB_REPOSITORY}/pulls/${{ github.event.pull_request.number }}")
        TARGET_BRANCH=$(echo "$PR_DATA" | jq -r '.base.ref')
        SOURCE_BRANCH=$(echo "$PR_DATA" | jq -r '.head.ref')
        PR_TITLE=$(echo "${{ github.event.pull_request.title }}" | sed -e 's/\(.*\)/\L\1/')
        echo "Target Branch: $TARGET_BRANCH"
        if [[ "$TARGET_BRANCH" != "main" ]]
        then
          echo "Skipping as target branch isn't main"
        elif [[ "$SOURCE_BRANCH" == "release-bot" ]] || [[ "$SOURCE_BRANCH" = *"release-v"* ]]
        then
          echo "Source branch is of release category, Skipping"
        elif [[ "$PR_TITLE" == *"fix:"* || "$PR_TITLE" == *"fixes:"* && "$TARGET_BRANCH" == "main" ]]
        then
          echo "Seems like a hotfix, skipping target branch change"
        else
          echo "Target branch is main and PR is not a hotfix, changing target branch"
          # Get target branch
          TARGET_BRANCH=$(git branch -a | grep release-v | tail -n 1)
          TARGET_BRANCH=$(echo ${TARGET_BRANCH##*( remotes/origin/)})
          curl -sSL -X PATCH -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28"  -H "Authorization: Bearer ${TOKEN}" \
         https://api.github.com/repos/$GITHUB_REPOSITORY/pulls/${{ github.event.pull_request.number }} -d '{"base": "${TARGET_BRANCH}"}' > /dev/null
        fi
        echo "Done"
        
      env:
        TOKEN: ${{ secrets.GIT_TOKEN }}

  validate-PR-issue:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Validate Issue Reference
      env:
        GITHUB_TOKEN: ${{ secrets.GIT_TARGET_TOKEN }}
        PR_BODY: ${{ github.event.pull_request.body }}
        url: ${{ github.event.pull_request.url }}
        PRNUM: ${{ github.event.pull_request.number }}
        TITLE: ${{ github.event.pull_request.title }}
      run: |
        set -x
        if [[ "$TITLE" == *"doc:"* || "$TITLE" == *"docs:"* || "$TITLE" == *"chore:"* ]]; then
          echo "Skipping validation as this is a PR for documentation or chore."
          gh pr edit $PRNUM --remove-label "PR:Issue-verification-failed"
          gh pr edit $PRNUM --add-label "PR:Ready-to-Review"
          exit 0
        fi
        pattern="((Fixes|Resolves) #[0-9]+)"
        # Get the pull request body
        PR_BODY=$(jq -r '.pull_request.body' $GITHUB_EVENT_PATH)
        echo "PR_BODY = $PR_BODY"

        ### Checks if PR_BODY has Fixes #<issue_number> or not
        ### grep -i (case insensitive) -E (enables extended regular expression in grep) -q (this option suppresses normal output)
        if echo "$PR_BODY" | grep -iEq "$pattern"; then
        # if [[ "$PR_BODY" =~ "$pattern" ]]; then
            ### Here we are taking only the numerical value ie. issue number
            ### head -n1 only prints the 1st line.
            ### grep -o -E "[0-9]+ basically outputs only the number between [0-9]+
            issue_num=$(echo "$PR_BODY" | grep -iE "$pattern" | head -n1 | grep -o -E "[0-9]+")
            echo "issue_num is : $issue_num"
        else
            echo "No Issue number detected hence failing the PR Validation check."
            gh pr edit $PRNUM --add-label "PR:Issue-verification-failed"
            gh pr edit $PRNUM --remove-label "PR:Ready-to-Review"
            exit 1
        fi

        ### Here we are setting the Internal Field Separator to "/"
        ### read -r -> reads input from variable $url
        ### -a url_parts -> tells read command to store input into an array named url_parts[]
        IFS="/" read -r -a url_parts <<< "$url"
        
        # Remove the last two elements (repos and the issue number)
        unset url_parts[-1]
        unset url_parts[-1]
        # Reattach the URL pieces
        url=$(IFS=/; echo "${url_parts[*]}")

        # Add the issue number to the URL
        url="${url}/issues/${issue_num}"
        echo "$url"
        response_code=$(curl -s -o /dev/null -w "%{http_code}" "$url")
        if [[ "$response_code" -eq 200 ]]; then
          # Check if issue is open or closed
          text=$(curl -s "$url")
          echo "checking status of the issue"
          if [[ $(echo "$text" | jq -r '.state') == "open" ]]; then
            echo "Issue #$issue_num is open"
            echo "Issue reference found in the pull request body."
            gh pr edit $PRNUM --remove-label "PR:Issue-verification-failed"
            gh pr edit $PRNUM --add-label "PR:Ready-to-Review"
            exit 0
          else
            echo "Issue #$issue_num is not open"
            exit 1
          fi
        else
            echo "Invalid Response Code obtained - error code: $response_code"
            echo "No valid issue reference found in the pull request body."
            gh pr comment $PRNUM --body "PR is not linked to any issue, please make the corresponding changes in the body."
            gh pr edit $PRNUM --add-label "PR:Issue-verification-failed"
            gh pr edit $PRNUM --remove-label "PR:Ready-to-Review"
            exit 1
        fi
