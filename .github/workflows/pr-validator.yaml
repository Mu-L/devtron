name: Centralized PR Validation

on:
  workflow_call:
    inputs:
      validate_sql:
        description: "Check SQL migrations"
        required: true
        type: boolean
    secrets:
      GH_TOKEN:
        required: true

jobs:
  pr-validation:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up jq (for parsing JSON)
      run: sudo apt-get install -y jq

    - name: PR Validation Script
      env:
        PR_BODY: ${{ github.event.pull_request.body }}
        PRNUM: ${{ github.event.pull_request.number }}
        TITLE: ${{ github.event.pull_request.title }}
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        BASE_REPO="${{ github.event.pull_request.base.repo.full_name }}"
        HEAD_REPO="${{ github.event.pull_request.head.repo.full_name }}"
        FORKED=false

        if [[ "$BASE_REPO" != "$HEAD_REPO" ]]; then
          FORKED=true
        fi

        # Skip validation for documentation or chore PRs
        if [[ "$TITLE" =~ ^(doc:|docs:|chore:|misc:|Release:|release:|Sync:|sync:) ]]; then
          echo "Skipping validation for docs/chore PR."
          gh pr edit "$PRNUM" --remove-label "PR:Issue-verification-failed" --add-label "PR:Ready-to-Review"
          exit 0
        fi

        # Define issue matching patterns
        PATTERNS=(
            "((Fixes|Resolves) #[0-9]+)"
            "((Fixes|Resolves) https://github.com/devtron-labs/devtron/issues/[0-9]+)"
            "((Fixes|Resolves) devtron-labs/devtron#[0-9]+)"
            "(Fixes|Resolves):?\\s+\\[#([0-9]+)\\]"
            "((Fixes|Resolves):? #devtron-labs/devops-sprint/issues/[0-9]+)"
            "((Fixes|Resolves):? #devtron-labs/sprint-tasks/issues/[0-9]+)"
        )

        # Function to extract issue number and repo from PR body
        extract_issue() {
          for pattern in "${PATTERNS[@]}"; do
            if [[ "$PR_BODY" =~ $pattern ]]; then
              issue_num="${BASH_REMATCH[0]}"
              issue_num=$(echo "$issue_num" | grep -oE '[0-9]+')
              repo=$(echo "$PR_BODY" | grep -oE "devtron-labs/[a-zA-Z0-9_-]+")
              echo "Found issue #$issue_num in repo: $repo"
              return 0
            fi
          done
          return 1
        }

        # Extract issue number and repo
        extract_issue || { 
          echo "No valid issue number found."
          gh pr edit "$PRNUM" --add-label "PR:Issue-verification-failed" --remove-label "PR:Ready-to-Review"
          exit 1
        }

        # Form the issue API URL dynamically
        ISSUE_API_URL="https://api.github.com/repos/$repo/issues/$issue_num"

        # Fetch issue details with curl
        fetch_issue_status() {
          local url="$1"
          echo "url -> url"
          if [[ "$repo" == "devtron-labs/devtron" || "$repo" == "devtron-labs/devtron-services" || "$repo" == "devtron-labs/dashboard" ]]; then
            status_code=$(curl -s -o /dev/null -w "%{http_code}" "$url")
          else
            status_code=$(curl -s -o /dev/null -w "%{http_code}" --header "Authorization: Bearer ${{ secrets.GH_PR_VALIDATOR_TOKEN }}" "$url")
          fi
        }

        # Get the issue response code
        fetch_issue_status "$ISSUE_API_URL"

        echo "STATUS CODE: $status_code"
        # Handle response based on status code
        if [[ "$status_code" -eq 200 ]]; then
          echo "Issue #$issue_num exists in $repo."

          # Add labels based on forked status and issue validity
          if [[ "$FORKED" == true ]]; then
            gh pr edit "$PRNUM" --remove-label "PR:Issue-verification-failed" --add-label "PR:Ready-to-Review"
            exit 0
          fi
          gh pr edit "$PRNUM" --remove-label "PR:Issue-verification-failed" --add-label "PR:Ready-to-Review"
          exit 0
        else
          echo "Issue not found. Invalid URL or issue number."
          gh pr comment "$PRNUM" --body "PR is not linked to a valid issue. Please update the issue link."
          gh pr edit "$PRNUM" --add-label "PR:Issue-verification-failed" --remove-label "PR:Ready-to-Review"
          exit 1
        fi

    - name: Check SQL file format and duplicates (if enabled)
      if: inputs.validate_sql == true
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        # Get the target (base) and source (head) branches
        BASE_BRANCH="${{ github.event.pull_request.base.ref }}"
        HEAD_BRANCH="${{ github.event.pull_request.head.ref }}"

        # Fetch both base and head branches
        git fetch origin "$BASE_BRANCH"
        git fetch origin "$HEAD_BRANCH"

        MIGRATION_DIR="scripts/sql"

        # Get changed .up.sql files between the base and head branches
        changed_files=$(git diff origin/"$BASE_BRANCH"...origin/"$HEAD_BRANCH" --name-only | grep "$MIGRATION_DIR" | grep ".up.sql")

        if [[ -z "$changed_files" ]]; then
          echo "No .up.sql migration files found."
          exit 0
        fi

        existing_migrations=$(ls "$MIGRATION_DIR" | grep -E "\.up\.sql$" | grep -oE "[0-9]{3}[0-9]{3}[0-9]{2}" | sort -n)
        for file in $changed_files; do
          migration_number=$(basename "$file" | grep -oE "[0-9]{3}[0-9]{3}[0-9]{2}")

          if [[ ! "$migration_number" =~ ^[0-9]{8}$ ]]; then
            echo "Invalid format in file $file."
            exit 1
          fi

          if echo "$existing_migrations" | grep -q "$migration_number"; then
            echo "Duplicate migration number $migration_number in file $file."
            exit 1
          fi
        done

        echo "All SQL migration files are valid."
