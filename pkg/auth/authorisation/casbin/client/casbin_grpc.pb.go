// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.9.1
// source: pkg/user/casbin/client/casbin.proto

package client

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CasbinServiceClient is the client API for CasbinService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CasbinServiceClient interface {
	AddPolicy(ctx context.Context, in *MultiPolicyObj, opts ...grpc.CallOption) (*AddPolicyResp, error)
	LoadPolicy(ctx context.Context, in *EmptyObj, opts ...grpc.CallOption) (*EmptyObj, error)
	RemovePolicy(ctx context.Context, in *MultiPolicyObj, opts ...grpc.CallOption) (*MultiPolicyObj, error)
	GetAllSubjects(ctx context.Context, in *EmptyObj, opts ...grpc.CallOption) (*GetAllSubjectsResp, error)
	DeleteRoleForUser(ctx context.Context, in *DeleteRoleForUserRequest, opts ...grpc.CallOption) (*DeleteRoleForUserResp, error)
	GetRolesForUser(ctx context.Context, in *GetRolesForUserRequest, opts ...grpc.CallOption) (*GetRolesForUserResp, error)
	GetUserByRole(ctx context.Context, in *GetUserByRoleRequest, opts ...grpc.CallOption) (*GetUserByRoleResp, error)
	RemovePoliciesByRole(ctx context.Context, in *RemovePoliciesByRoleRequest, opts ...grpc.CallOption) (*RemovePoliciesByRoleResp, error)
	RemovePoliciesByRoles(ctx context.Context, in *RemovePoliciesByRolesRequest, opts ...grpc.CallOption) (*RemovePoliciesByRolesResp, error)
}

type casbinServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCasbinServiceClient(cc grpc.ClientConnInterface) CasbinServiceClient {
	return &casbinServiceClient{cc}
}

func (c *casbinServiceClient) AddPolicy(ctx context.Context, in *MultiPolicyObj, opts ...grpc.CallOption) (*AddPolicyResp, error) {
	out := new(AddPolicyResp)
	err := c.cc.Invoke(ctx, "/CasbinService/AddPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) LoadPolicy(ctx context.Context, in *EmptyObj, opts ...grpc.CallOption) (*EmptyObj, error) {
	out := new(EmptyObj)
	err := c.cc.Invoke(ctx, "/CasbinService/LoadPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) RemovePolicy(ctx context.Context, in *MultiPolicyObj, opts ...grpc.CallOption) (*MultiPolicyObj, error) {
	out := new(MultiPolicyObj)
	err := c.cc.Invoke(ctx, "/CasbinService/RemovePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) GetAllSubjects(ctx context.Context, in *EmptyObj, opts ...grpc.CallOption) (*GetAllSubjectsResp, error) {
	out := new(GetAllSubjectsResp)
	err := c.cc.Invoke(ctx, "/CasbinService/GetAllSubjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) DeleteRoleForUser(ctx context.Context, in *DeleteRoleForUserRequest, opts ...grpc.CallOption) (*DeleteRoleForUserResp, error) {
	out := new(DeleteRoleForUserResp)
	err := c.cc.Invoke(ctx, "/CasbinService/DeleteRoleForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) GetRolesForUser(ctx context.Context, in *GetRolesForUserRequest, opts ...grpc.CallOption) (*GetRolesForUserResp, error) {
	out := new(GetRolesForUserResp)
	err := c.cc.Invoke(ctx, "/CasbinService/GetRolesForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) GetUserByRole(ctx context.Context, in *GetUserByRoleRequest, opts ...grpc.CallOption) (*GetUserByRoleResp, error) {
	out := new(GetUserByRoleResp)
	err := c.cc.Invoke(ctx, "/CasbinService/GetUserByRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) RemovePoliciesByRole(ctx context.Context, in *RemovePoliciesByRoleRequest, opts ...grpc.CallOption) (*RemovePoliciesByRoleResp, error) {
	out := new(RemovePoliciesByRoleResp)
	err := c.cc.Invoke(ctx, "/CasbinService/RemovePoliciesByRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) RemovePoliciesByRoles(ctx context.Context, in *RemovePoliciesByRolesRequest, opts ...grpc.CallOption) (*RemovePoliciesByRolesResp, error) {
	out := new(RemovePoliciesByRolesResp)
	err := c.cc.Invoke(ctx, "/CasbinService/RemovePoliciesByRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CasbinServiceServer is the server API for CasbinService service.
// All implementations must embed UnimplementedCasbinServiceServer
// for forward compatibility
type CasbinServiceServer interface {
	AddPolicy(context.Context, *MultiPolicyObj) (*AddPolicyResp, error)
	LoadPolicy(context.Context, *EmptyObj) (*EmptyObj, error)
	RemovePolicy(context.Context, *MultiPolicyObj) (*MultiPolicyObj, error)
	GetAllSubjects(context.Context, *EmptyObj) (*GetAllSubjectsResp, error)
	DeleteRoleForUser(context.Context, *DeleteRoleForUserRequest) (*DeleteRoleForUserResp, error)
	GetRolesForUser(context.Context, *GetRolesForUserRequest) (*GetRolesForUserResp, error)
	GetUserByRole(context.Context, *GetUserByRoleRequest) (*GetUserByRoleResp, error)
	RemovePoliciesByRole(context.Context, *RemovePoliciesByRoleRequest) (*RemovePoliciesByRoleResp, error)
	RemovePoliciesByRoles(context.Context, *RemovePoliciesByRolesRequest) (*RemovePoliciesByRolesResp, error)
	mustEmbedUnimplementedCasbinServiceServer()
}

// UnimplementedCasbinServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCasbinServiceServer struct {
}

func (UnimplementedCasbinServiceServer) AddPolicy(context.Context, *MultiPolicyObj) (*AddPolicyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPolicy not implemented")
}
func (UnimplementedCasbinServiceServer) LoadPolicy(context.Context, *EmptyObj) (*EmptyObj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadPolicy not implemented")
}
func (UnimplementedCasbinServiceServer) RemovePolicy(context.Context, *MultiPolicyObj) (*MultiPolicyObj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePolicy not implemented")
}
func (UnimplementedCasbinServiceServer) GetAllSubjects(context.Context, *EmptyObj) (*GetAllSubjectsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSubjects not implemented")
}
func (UnimplementedCasbinServiceServer) DeleteRoleForUser(context.Context, *DeleteRoleForUserRequest) (*DeleteRoleForUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoleForUser not implemented")
}
func (UnimplementedCasbinServiceServer) GetRolesForUser(context.Context, *GetRolesForUserRequest) (*GetRolesForUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRolesForUser not implemented")
}
func (UnimplementedCasbinServiceServer) GetUserByRole(context.Context, *GetUserByRoleRequest) (*GetUserByRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByRole not implemented")
}
func (UnimplementedCasbinServiceServer) RemovePoliciesByRole(context.Context, *RemovePoliciesByRoleRequest) (*RemovePoliciesByRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePoliciesByRole not implemented")
}
func (UnimplementedCasbinServiceServer) RemovePoliciesByRoles(context.Context, *RemovePoliciesByRolesRequest) (*RemovePoliciesByRolesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePoliciesByRoles not implemented")
}
func (UnimplementedCasbinServiceServer) mustEmbedUnimplementedCasbinServiceServer() {}

// UnsafeCasbinServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CasbinServiceServer will
// result in compilation errors.
type UnsafeCasbinServiceServer interface {
	mustEmbedUnimplementedCasbinServiceServer()
}

func RegisterCasbinServiceServer(s grpc.ServiceRegistrar, srv CasbinServiceServer) {
	s.RegisterService(&CasbinService_ServiceDesc, srv)
}

func _CasbinService_AddPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiPolicyObj)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).AddPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CasbinService/AddPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).AddPolicy(ctx, req.(*MultiPolicyObj))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_LoadPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyObj)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).LoadPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CasbinService/LoadPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).LoadPolicy(ctx, req.(*EmptyObj))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_RemovePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiPolicyObj)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).RemovePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CasbinService/RemovePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).RemovePolicy(ctx, req.(*MultiPolicyObj))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_GetAllSubjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyObj)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).GetAllSubjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CasbinService/GetAllSubjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).GetAllSubjects(ctx, req.(*EmptyObj))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_DeleteRoleForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).DeleteRoleForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CasbinService/DeleteRoleForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).DeleteRoleForUser(ctx, req.(*DeleteRoleForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_GetRolesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRolesForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).GetRolesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CasbinService/GetRolesForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).GetRolesForUser(ctx, req.(*GetRolesForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_GetUserByRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).GetUserByRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CasbinService/GetUserByRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).GetUserByRole(ctx, req.(*GetUserByRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_RemovePoliciesByRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePoliciesByRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).RemovePoliciesByRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CasbinService/RemovePoliciesByRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).RemovePoliciesByRole(ctx, req.(*RemovePoliciesByRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_RemovePoliciesByRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePoliciesByRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).RemovePoliciesByRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CasbinService/RemovePoliciesByRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).RemovePoliciesByRoles(ctx, req.(*RemovePoliciesByRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CasbinService_ServiceDesc is the grpc.ServiceDesc for CasbinService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CasbinService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CasbinService",
	HandlerType: (*CasbinServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPolicy",
			Handler:    _CasbinService_AddPolicy_Handler,
		},
		{
			MethodName: "LoadPolicy",
			Handler:    _CasbinService_LoadPolicy_Handler,
		},
		{
			MethodName: "RemovePolicy",
			Handler:    _CasbinService_RemovePolicy_Handler,
		},
		{
			MethodName: "GetAllSubjects",
			Handler:    _CasbinService_GetAllSubjects_Handler,
		},
		{
			MethodName: "DeleteRoleForUser",
			Handler:    _CasbinService_DeleteRoleForUser_Handler,
		},
		{
			MethodName: "GetRolesForUser",
			Handler:    _CasbinService_GetRolesForUser_Handler,
		},
		{
			MethodName: "GetUserByRole",
			Handler:    _CasbinService_GetUserByRole_Handler,
		},
		{
			MethodName: "RemovePoliciesByRole",
			Handler:    _CasbinService_RemovePoliciesByRole_Handler,
		},
		{
			MethodName: "RemovePoliciesByRoles",
			Handler:    _CasbinService_RemovePoliciesByRoles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/user/casbin/client/casbin.proto",
}
