// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	pg "github.com/go-pg/pg"
	mock "github.com/stretchr/testify/mock"

	repository "github.com/devtron-labs/devtron/pkg/globalPolicy/repository"
)

// GlobalPolicySearchableFieldRepository is an autogenerated mock type for the GlobalPolicySearchableFieldRepository type
type GlobalPolicySearchableFieldRepository struct {
	mock.Mock
}

// CreateInBatchWithTxn provides a mock function with given fields: models, tx
func (_m *GlobalPolicySearchableFieldRepository) CreateInBatchWithTxn(models []*repository.GlobalPolicySearchableField, tx *pg.Tx) error {
	ret := _m.Called(models, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*repository.GlobalPolicySearchableField, *pg.Tx) error); ok {
		r0 = rf(models, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByPolicyId provides a mock function with given fields: policyId, tx
func (_m *GlobalPolicySearchableFieldRepository) DeleteByPolicyId(policyId int, tx *pg.Tx) error {
	ret := _m.Called(policyId, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *pg.Tx) error); ok {
		r0 = rf(policyId, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSearchableFields provides a mock function with given fields: searchableKeyIdValueMapWhereOrGroup, searchableKeyIdValueMapWhereAndGroup
func (_m *GlobalPolicySearchableFieldRepository) GetSearchableFields(searchableKeyIdValueMapWhereOrGroup map[int][]string, searchableKeyIdValueMapWhereAndGroup map[int][]string) ([]*repository.GlobalPolicySearchableField, error) {
	ret := _m.Called(searchableKeyIdValueMapWhereOrGroup, searchableKeyIdValueMapWhereAndGroup)

	var r0 []*repository.GlobalPolicySearchableField
	if rf, ok := ret.Get(0).(func(map[int][]string, map[int][]string) []*repository.GlobalPolicySearchableField); ok {
		r0 = rf(searchableKeyIdValueMapWhereOrGroup, searchableKeyIdValueMapWhereAndGroup)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*repository.GlobalPolicySearchableField)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(map[int][]string, map[int][]string) error); ok {
		r1 = rf(searchableKeyIdValueMapWhereOrGroup, searchableKeyIdValueMapWhereAndGroup)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGlobalPolicySearchableFieldRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewGlobalPolicySearchableFieldRepository creates a new instance of GlobalPolicySearchableFieldRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGlobalPolicySearchableFieldRepository(t mockConstructorTestingTNewGlobalPolicySearchableFieldRepository) *GlobalPolicySearchableFieldRepository {
	mock := &GlobalPolicySearchableFieldRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
