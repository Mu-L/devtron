// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	pg "github.com/go-pg/pg"
	mock "github.com/stretchr/testify/mock"

	repository "github.com/devtron-labs/devtron/pkg/pipeline/repository"
)

// PipelineStageRepository is an autogenerated mock type for the PipelineStageRepository type
type PipelineStageRepository struct {
	mock.Mock
}

// CheckIfCommandArgMappingExists provides a mock function with given fields: command, arg, scriptId
func (_m *PipelineStageRepository) CheckIfCommandArgMappingExists(command string, arg string, scriptId int) (bool, error) {
	ret := _m.Called(command, arg, scriptId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, int) bool); ok {
		r0 = rf(command, arg, scriptId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, int) error); ok {
		r1 = rf(command, arg, scriptId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckIfFilePathMappingExists provides a mock function with given fields: filePathOnDisk, filePathOnContainer, scriptId
func (_m *PipelineStageRepository) CheckIfFilePathMappingExists(filePathOnDisk string, filePathOnContainer string, scriptId int) (bool, error) {
	ret := _m.Called(filePathOnDisk, filePathOnContainer, scriptId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, int) bool); ok {
		r0 = rf(filePathOnDisk, filePathOnContainer, scriptId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, int) error); ok {
		r1 = rf(filePathOnDisk, filePathOnContainer, scriptId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckIfPortMappingExists provides a mock function with given fields: portOnLocal, portOnContainer, scriptId
func (_m *PipelineStageRepository) CheckIfPortMappingExists(portOnLocal int, portOnContainer int, scriptId int) (bool, error) {
	ret := _m.Called(portOnLocal, portOnContainer, scriptId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, int, int) bool); ok {
		r0 = rf(portOnLocal, portOnContainer, scriptId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, int) error); ok {
		r1 = rf(portOnLocal, portOnContainer, scriptId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCiStage provides a mock function with given fields: ciStage
func (_m *PipelineStageRepository) CreateCiStage(ciStage *repository.PipelineStage) (*repository.PipelineStage, error) {
	ret := _m.Called(ciStage)

	var r0 *repository.PipelineStage
	if rf, ok := ret.Get(0).(func(*repository.PipelineStage) *repository.PipelineStage); ok {
		r0 = rf(ciStage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.PipelineStage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*repository.PipelineStage) error); ok {
		r1 = rf(ciStage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePipelineScript provides a mock function with given fields: pipelineScript
func (_m *PipelineStageRepository) CreatePipelineScript(pipelineScript *repository.PluginPipelineScript) (*repository.PluginPipelineScript, error) {
	ret := _m.Called(pipelineScript)

	var r0 *repository.PluginPipelineScript
	if rf, ok := ret.Get(0).(func(*repository.PluginPipelineScript) *repository.PluginPipelineScript); ok {
		r0 = rf(pipelineScript)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.PluginPipelineScript)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*repository.PluginPipelineScript) error); ok {
		r1 = rf(pipelineScript)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePipelineStageStep provides a mock function with given fields: step
func (_m *PipelineStageRepository) CreatePipelineStageStep(step *repository.PipelineStageStep) (*repository.PipelineStageStep, error) {
	ret := _m.Called(step)

	var r0 *repository.PipelineStageStep
	if rf, ok := ret.Get(0).(func(*repository.PipelineStageStep) *repository.PipelineStageStep); ok {
		r0 = rf(step)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.PipelineStageStep)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*repository.PipelineStageStep) error); ok {
		r1 = rf(step)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePipelineStageStepConditions provides a mock function with given fields: _a0, _a1
func (_m *PipelineStageRepository) CreatePipelineStageStepConditions(_a0 []repository.PipelineStageStepCondition, _a1 *pg.Tx) ([]repository.PipelineStageStepCondition, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []repository.PipelineStageStepCondition
	if rf, ok := ret.Get(0).(func([]repository.PipelineStageStepCondition, *pg.Tx) []repository.PipelineStageStepCondition); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.PipelineStageStepCondition)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]repository.PipelineStageStepCondition, *pg.Tx) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePipelineStageStepVariables provides a mock function with given fields: _a0, _a1
func (_m *PipelineStageRepository) CreatePipelineStageStepVariables(_a0 []repository.PipelineStageStepVariable, _a1 *pg.Tx) ([]repository.PipelineStageStepVariable, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []repository.PipelineStageStepVariable
	if rf, ok := ret.Get(0).(func([]repository.PipelineStageStepVariable, *pg.Tx) []repository.PipelineStageStepVariable); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.PipelineStageStepVariable)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]repository.PipelineStageStepVariable, *pg.Tx) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateScriptMapping provides a mock function with given fields: mappings
func (_m *PipelineStageRepository) CreateScriptMapping(mappings []repository.ScriptPathArgPortMapping) error {
	ret := _m.Called(mappings)

	var r0 error
	if rf, ok := ret.Get(0).(func([]repository.ScriptPathArgPortMapping) error); ok {
		r0 = rf(mappings)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllCiStagesByCiPipelineId provides a mock function with given fields: ciPipelineId
func (_m *PipelineStageRepository) GetAllCiStagesByCiPipelineId(ciPipelineId int) ([]*repository.PipelineStage, error) {
	ret := _m.Called(ciPipelineId)

	var r0 []*repository.PipelineStage
	if rf, ok := ret.Get(0).(func(int) []*repository.PipelineStage); ok {
		r0 = rf(ciPipelineId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*repository.PipelineStage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(ciPipelineId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllStepsByStageId provides a mock function with given fields: stageId
func (_m *PipelineStageRepository) GetAllStepsByStageId(stageId int) ([]*repository.PipelineStageStep, error) {
	ret := _m.Called(stageId)

	var r0 []*repository.PipelineStageStep
	if rf, ok := ret.Get(0).(func(int) []*repository.PipelineStageStep); ok {
		r0 = rf(stageId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*repository.PipelineStageStep)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(stageId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCiStageByCiPipelineIdAndStageType provides a mock function with given fields: ciPipelineId, stageType
func (_m *PipelineStageRepository) GetCiStageByCiPipelineIdAndStageType(ciPipelineId int, stageType repository.PipelineStageType) (*repository.PipelineStage, error) {
	ret := _m.Called(ciPipelineId, stageType)

	var r0 *repository.PipelineStage
	if rf, ok := ret.Get(0).(func(int, repository.PipelineStageType) *repository.PipelineStage); ok {
		r0 = rf(ciPipelineId, stageType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.PipelineStage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, repository.PipelineStageType) error); ok {
		r1 = rf(ciPipelineId, stageType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConditionIdsByStageId provides a mock function with given fields: stageId
func (_m *PipelineStageRepository) GetConditionIdsByStageId(stageId int) ([]int, error) {
	ret := _m.Called(stageId)

	var r0 []int
	if rf, ok := ret.Get(0).(func(int) []int); ok {
		r0 = rf(stageId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(stageId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConditionIdsByStepId provides a mock function with given fields: stepId
func (_m *PipelineStageRepository) GetConditionIdsByStepId(stepId int) ([]int, error) {
	ret := _m.Called(stepId)

	var r0 []int
	if rf, ok := ret.Get(0).(func(int) []int); ok {
		r0 = rf(stepId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(stepId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConditionsByStepId provides a mock function with given fields: stepId
func (_m *PipelineStageRepository) GetConditionsByStepId(stepId int) ([]*repository.PipelineStageStepCondition, error) {
	ret := _m.Called(stepId)

	var r0 []*repository.PipelineStageStepCondition
	if rf, ok := ret.Get(0).(func(int) []*repository.PipelineStageStepCondition); ok {
		r0 = rf(stepId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*repository.PipelineStageStepCondition)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(stepId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConditionsByVariableId provides a mock function with given fields: variableId
func (_m *PipelineStageRepository) GetConditionsByVariableId(variableId int) ([]*repository.PipelineStageStepCondition, error) {
	ret := _m.Called(variableId)

	var r0 []*repository.PipelineStageStepCondition
	if rf, ok := ret.Get(0).(func(int) []*repository.PipelineStageStepCondition); ok {
		r0 = rf(variableId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*repository.PipelineStageStepCondition)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(variableId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfiguredPluginsForCIPipelines provides a mock function with given fields: ciPipelineIds
func (_m *PipelineStageRepository) GetConfiguredPluginsForCIPipelines(ciPipelineIds []int) ([]*repository.PipelineStageStep, error) {
	ret := _m.Called(ciPipelineIds)

	var r0 []*repository.PipelineStageStep
	if rf, ok := ret.Get(0).(func([]int) []*repository.PipelineStageStep); ok {
		r0 = rf(ciPipelineIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*repository.PipelineStageStep)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]int) error); ok {
		r1 = rf(ciPipelineIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConnection provides a mock function with given fields:
func (_m *PipelineStageRepository) GetConnection() *pg.DB {
	ret := _m.Called()

	var r0 *pg.DB
	if rf, ok := ret.Get(0).(func() *pg.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pg.DB)
		}
	}

	return r0
}

// GetScriptDetailById provides a mock function with given fields: id
func (_m *PipelineStageRepository) GetScriptDetailById(id int) (*repository.PluginPipelineScript, error) {
	ret := _m.Called(id)

	var r0 *repository.PluginPipelineScript
	if rf, ok := ret.Get(0).(func(int) *repository.PluginPipelineScript); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.PluginPipelineScript)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetScriptIdsByStageId provides a mock function with given fields: stageId
func (_m *PipelineStageRepository) GetScriptIdsByStageId(stageId int) ([]int, error) {
	ret := _m.Called(stageId)

	var r0 []int
	if rf, ok := ret.Get(0).(func(int) []int); ok {
		r0 = rf(stageId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(stageId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetScriptMappingDetailByScriptId provides a mock function with given fields: scriptId
func (_m *PipelineStageRepository) GetScriptMappingDetailByScriptId(scriptId int) ([]*repository.ScriptPathArgPortMapping, error) {
	ret := _m.Called(scriptId)

	var r0 []*repository.ScriptPathArgPortMapping
	if rf, ok := ret.Get(0).(func(int) []*repository.ScriptPathArgPortMapping); ok {
		r0 = rf(scriptId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*repository.ScriptPathArgPortMapping)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(scriptId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetScriptMappingIdsByStageId provides a mock function with given fields: stageId
func (_m *PipelineStageRepository) GetScriptMappingIdsByStageId(stageId int) ([]int, error) {
	ret := _m.Called(stageId)

	var r0 []int
	if rf, ok := ret.Get(0).(func(int) []int); ok {
		r0 = rf(stageId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(stageId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStepById provides a mock function with given fields: stepId
func (_m *PipelineStageRepository) GetStepById(stepId int) (*repository.PipelineStageStep, error) {
	ret := _m.Called(stepId)

	var r0 *repository.PipelineStageStep
	if rf, ok := ret.Get(0).(func(int) *repository.PipelineStageStep); ok {
		r0 = rf(stepId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.PipelineStageStep)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(stepId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStepIdsByStageId provides a mock function with given fields: stageId
func (_m *PipelineStageRepository) GetStepIdsByStageId(stageId int) ([]int, error) {
	ret := _m.Called(stageId)

	var r0 []int
	if rf, ok := ret.Get(0).(func(int) []int); ok {
		r0 = rf(stageId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(stageId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVariableIdsByStageId provides a mock function with given fields: stageId
func (_m *PipelineStageRepository) GetVariableIdsByStageId(stageId int) ([]int, error) {
	ret := _m.Called(stageId)

	var r0 []int
	if rf, ok := ret.Get(0).(func(int) []int); ok {
		r0 = rf(stageId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(stageId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVariableIdsByStepIdAndVariableType provides a mock function with given fields: stepId, variableType
func (_m *PipelineStageRepository) GetVariableIdsByStepIdAndVariableType(stepId int, variableType repository.PipelineStageStepVariableType) ([]int, error) {
	ret := _m.Called(stepId, variableType)

	var r0 []int
	if rf, ok := ret.Get(0).(func(int, repository.PipelineStageStepVariableType) []int); ok {
		r0 = rf(stepId, variableType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, repository.PipelineStageStepVariableType) error); ok {
		r1 = rf(stepId, variableType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVariablesByStepId provides a mock function with given fields: stepId
func (_m *PipelineStageRepository) GetVariablesByStepId(stepId int) ([]*repository.PipelineStageStepVariable, error) {
	ret := _m.Called(stepId)

	var r0 []*repository.PipelineStageStepVariable
	if rf, ok := ret.Get(0).(func(int) []*repository.PipelineStageStepVariable); ok {
		r0 = rf(stepId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*repository.PipelineStageStepVariable)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(stepId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarkCiStageDeletedById provides a mock function with given fields: ciStageId, updatedBy, tx
func (_m *PipelineStageRepository) MarkCiStageDeletedById(ciStageId int, updatedBy int32, tx *pg.Tx) error {
	ret := _m.Called(ciStageId, updatedBy, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int32, *pg.Tx) error); ok {
		r0 = rf(ciStageId, updatedBy, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MarkCiStageStepsDeletedByStageId provides a mock function with given fields: ciStageId, updatedBy, tx
func (_m *PipelineStageRepository) MarkCiStageStepsDeletedByStageId(ciStageId int, updatedBy int32, tx *pg.Tx) error {
	ret := _m.Called(ciStageId, updatedBy, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int32, *pg.Tx) error); ok {
		r0 = rf(ciStageId, updatedBy, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MarkConditionsDeletedByStepId provides a mock function with given fields: stepId, tx
func (_m *PipelineStageRepository) MarkConditionsDeletedByStepId(stepId int, tx *pg.Tx) error {
	ret := _m.Called(stepId, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *pg.Tx) error); ok {
		r0 = rf(stepId, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MarkConditionsDeletedExcludingActiveVariablesInUpdateReq provides a mock function with given fields: activeConditionIdsPresentInReq, stepId, tx
func (_m *PipelineStageRepository) MarkConditionsDeletedExcludingActiveVariablesInUpdateReq(activeConditionIdsPresentInReq []int, stepId int, tx *pg.Tx) error {
	ret := _m.Called(activeConditionIdsPresentInReq, stepId, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func([]int, int, *pg.Tx) error); ok {
		r0 = rf(activeConditionIdsPresentInReq, stepId, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MarkPipelineScriptMappingsDeletedByIds provides a mock function with given fields: ids, updatedBy, tx
func (_m *PipelineStageRepository) MarkPipelineScriptMappingsDeletedByIds(ids []int, updatedBy int32, tx *pg.Tx) error {
	ret := _m.Called(ids, updatedBy, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func([]int, int32, *pg.Tx) error); ok {
		r0 = rf(ids, updatedBy, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MarkPipelineScriptsDeletedByIds provides a mock function with given fields: ids, updatedBy, tx
func (_m *PipelineStageRepository) MarkPipelineScriptsDeletedByIds(ids []int, updatedBy int32, tx *pg.Tx) error {
	ret := _m.Called(ids, updatedBy, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func([]int, int32, *pg.Tx) error); ok {
		r0 = rf(ids, updatedBy, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MarkPipelineStageStepConditionDeletedByIds provides a mock function with given fields: ids, updatedBy, tx
func (_m *PipelineStageRepository) MarkPipelineStageStepConditionDeletedByIds(ids []int, updatedBy int32, tx *pg.Tx) error {
	ret := _m.Called(ids, updatedBy, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func([]int, int32, *pg.Tx) error); ok {
		r0 = rf(ids, updatedBy, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MarkPipelineStageStepVariablesDeletedByIds provides a mock function with given fields: ids, updatedBy, tx
func (_m *PipelineStageRepository) MarkPipelineStageStepVariablesDeletedByIds(ids []int, updatedBy int32, tx *pg.Tx) error {
	ret := _m.Called(ids, updatedBy, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func([]int, int32, *pg.Tx) error); ok {
		r0 = rf(ids, updatedBy, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MarkScriptDeletedById provides a mock function with given fields: scriptId
func (_m *PipelineStageRepository) MarkScriptDeletedById(scriptId int) error {
	ret := _m.Called(scriptId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(scriptId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MarkScriptMappingDeletedByScriptId provides a mock function with given fields: scriptId
func (_m *PipelineStageRepository) MarkScriptMappingDeletedByScriptId(scriptId int) error {
	ret := _m.Called(scriptId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(scriptId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MarkStepsDeletedByStageId provides a mock function with given fields: stageId
func (_m *PipelineStageRepository) MarkStepsDeletedByStageId(stageId int) error {
	ret := _m.Called(stageId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(stageId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MarkStepsDeletedExcludingActiveStepsInUpdateReq provides a mock function with given fields: activeStepIdsPresentInReq, stageId
func (_m *PipelineStageRepository) MarkStepsDeletedExcludingActiveStepsInUpdateReq(activeStepIdsPresentInReq []int, stageId int) error {
	ret := _m.Called(activeStepIdsPresentInReq, stageId)

	var r0 error
	if rf, ok := ret.Get(0).(func([]int, int) error); ok {
		r0 = rf(activeStepIdsPresentInReq, stageId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MarkVariablesDeletedByStepIdAndVariableType provides a mock function with given fields: stepId, variableType, tx
func (_m *PipelineStageRepository) MarkVariablesDeletedByStepIdAndVariableType(stepId int, variableType repository.PipelineStageStepVariableType, tx *pg.Tx) error {
	ret := _m.Called(stepId, variableType, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, repository.PipelineStageStepVariableType, *pg.Tx) error); ok {
		r0 = rf(stepId, variableType, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MarkVariablesDeletedExcludingActiveVariablesInUpdateReq provides a mock function with given fields: activeVariableIdsPresentInReq, stepId, variableType, tx
func (_m *PipelineStageRepository) MarkVariablesDeletedExcludingActiveVariablesInUpdateReq(activeVariableIdsPresentInReq []int, stepId int, variableType repository.PipelineStageStepVariableType, tx *pg.Tx) error {
	ret := _m.Called(activeVariableIdsPresentInReq, stepId, variableType, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func([]int, int, repository.PipelineStageStepVariableType, *pg.Tx) error); ok {
		r0 = rf(activeVariableIdsPresentInReq, stepId, variableType, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCiStage provides a mock function with given fields: ciStage
func (_m *PipelineStageRepository) UpdateCiStage(ciStage *repository.PipelineStage) (*repository.PipelineStage, error) {
	ret := _m.Called(ciStage)

	var r0 *repository.PipelineStage
	if rf, ok := ret.Get(0).(func(*repository.PipelineStage) *repository.PipelineStage); ok {
		r0 = rf(ciStage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.PipelineStage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*repository.PipelineStage) error); ok {
		r1 = rf(ciStage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePipelineScript provides a mock function with given fields: pipelineScript
func (_m *PipelineStageRepository) UpdatePipelineScript(pipelineScript *repository.PluginPipelineScript) (*repository.PluginPipelineScript, error) {
	ret := _m.Called(pipelineScript)

	var r0 *repository.PluginPipelineScript
	if rf, ok := ret.Get(0).(func(*repository.PluginPipelineScript) *repository.PluginPipelineScript); ok {
		r0 = rf(pipelineScript)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.PluginPipelineScript)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*repository.PluginPipelineScript) error); ok {
		r1 = rf(pipelineScript)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePipelineStageStep provides a mock function with given fields: step
func (_m *PipelineStageRepository) UpdatePipelineStageStep(step *repository.PipelineStageStep) (*repository.PipelineStageStep, error) {
	ret := _m.Called(step)

	var r0 *repository.PipelineStageStep
	if rf, ok := ret.Get(0).(func(*repository.PipelineStageStep) *repository.PipelineStageStep); ok {
		r0 = rf(step)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.PipelineStageStep)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*repository.PipelineStageStep) error); ok {
		r1 = rf(step)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePipelineStageStepConditions provides a mock function with given fields: conditions, tx
func (_m *PipelineStageRepository) UpdatePipelineStageStepConditions(conditions []repository.PipelineStageStepCondition, tx *pg.Tx) ([]repository.PipelineStageStepCondition, error) {
	ret := _m.Called(conditions, tx)

	var r0 []repository.PipelineStageStepCondition
	if rf, ok := ret.Get(0).(func([]repository.PipelineStageStepCondition, *pg.Tx) []repository.PipelineStageStepCondition); ok {
		r0 = rf(conditions, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.PipelineStageStepCondition)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]repository.PipelineStageStepCondition, *pg.Tx) error); ok {
		r1 = rf(conditions, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePipelineStageStepVariables provides a mock function with given fields: variables, tx
func (_m *PipelineStageRepository) UpdatePipelineStageStepVariables(variables []repository.PipelineStageStepVariable, tx *pg.Tx) ([]repository.PipelineStageStepVariable, error) {
	ret := _m.Called(variables, tx)

	var r0 []repository.PipelineStageStepVariable
	if rf, ok := ret.Get(0).(func([]repository.PipelineStageStepVariable, *pg.Tx) []repository.PipelineStageStepVariable); ok {
		r0 = rf(variables, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.PipelineStageStepVariable)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]repository.PipelineStageStepVariable, *pg.Tx) error); ok {
		r1 = rf(variables, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPipelineStageRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewPipelineStageRepository creates a new instance of PipelineStageRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPipelineStageRepository(t mockConstructorTestingTNewPipelineStageRepository) *PipelineStageRepository {
	mock := &PipelineStageRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
