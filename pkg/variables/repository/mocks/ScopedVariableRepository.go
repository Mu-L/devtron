// Code generated by mockery v2.34.0. DO NOT EDIT.

package mocks

import (
	pg "github.com/go-pg/pg"
	mock "github.com/stretchr/testify/mock"

	repository "github.com/devtron-labs/devtron/pkg/variables/repository"

	sql "github.com/devtron-labs/devtron/pkg/sql"
)

// ScopedVariableRepository is an autogenerated mock type for the ScopedVariableRepository type
type ScopedVariableRepository struct {
	mock.Mock
}

// CommitTx provides a mock function with given fields: tx
func (_m *ScopedVariableRepository) CommitTx(tx *pg.Tx) error {
	ret := _m.Called(tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pg.Tx) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateVariableData provides a mock function with given fields: variableDefinition, tx
func (_m *ScopedVariableRepository) CreateVariableData(variableDefinition []*repository.VariableData, tx *pg.Tx) error {
	ret := _m.Called(variableDefinition, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*repository.VariableData, *pg.Tx) error); ok {
		r0 = rf(variableDefinition, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateVariableDefinition provides a mock function with given fields: variableDefinition, tx
func (_m *ScopedVariableRepository) CreateVariableDefinition(variableDefinition []*repository.VariableDefinition, tx *pg.Tx) ([]*repository.VariableDefinition, error) {
	ret := _m.Called(variableDefinition, tx)

	var r0 []*repository.VariableDefinition
	var r1 error
	if rf, ok := ret.Get(0).(func([]*repository.VariableDefinition, *pg.Tx) ([]*repository.VariableDefinition, error)); ok {
		return rf(variableDefinition, tx)
	}
	if rf, ok := ret.Get(0).(func([]*repository.VariableDefinition, *pg.Tx) []*repository.VariableDefinition); ok {
		r0 = rf(variableDefinition, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*repository.VariableDefinition)
		}
	}

	if rf, ok := ret.Get(1).(func([]*repository.VariableDefinition, *pg.Tx) error); ok {
		r1 = rf(variableDefinition, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVariables provides a mock function with given fields: auditLog, tx
func (_m *ScopedVariableRepository) DeleteVariables(auditLog sql.AuditLog, tx *pg.Tx) error {
	ret := _m.Called(auditLog, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(sql.AuditLog, *pg.Tx) error); ok {
		r0 = rf(auditLog, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllVariableDefinition provides a mock function with given fields:
func (_m *ScopedVariableRepository) GetAllVariableDefinition() ([]*repository.VariableDefinition, error) {
	ret := _m.Called()

	var r0 []*repository.VariableDefinition
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*repository.VariableDefinition, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*repository.VariableDefinition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*repository.VariableDefinition)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllVariableMetadata provides a mock function with given fields:
func (_m *ScopedVariableRepository) GetAllVariableMetadata() ([]*repository.VariableDefinition, error) {
	ret := _m.Called()

	var r0 []*repository.VariableDefinition
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*repository.VariableDefinition, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*repository.VariableDefinition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*repository.VariableDefinition)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllVariables provides a mock function with given fields:
func (_m *ScopedVariableRepository) GetAllVariables() ([]*repository.VariableDefinition, error) {
	ret := _m.Called()

	var r0 []*repository.VariableDefinition
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*repository.VariableDefinition, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*repository.VariableDefinition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*repository.VariableDefinition)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataForScopeIds provides a mock function with given fields: scopeIds
func (_m *ScopedVariableRepository) GetDataForScopeIds(scopeIds []int) ([]*repository.VariableData, error) {
	ret := _m.Called(scopeIds)

	var r0 []*repository.VariableData
	var r1 error
	if rf, ok := ret.Get(0).(func([]int) ([]*repository.VariableData, error)); ok {
		return rf(scopeIds)
	}
	if rf, ok := ret.Get(0).(func([]int) []*repository.VariableData); ok {
		r0 = rf(scopeIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*repository.VariableData)
		}
	}

	if rf, ok := ret.Get(1).(func([]int) error); ok {
		r1 = rf(scopeIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVariablesByNames provides a mock function with given fields: vars
func (_m *ScopedVariableRepository) GetVariablesByNames(vars []string) ([]*repository.VariableDefinition, error) {
	ret := _m.Called(vars)

	var r0 []*repository.VariableDefinition
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]*repository.VariableDefinition, error)); ok {
		return rf(vars)
	}
	if rf, ok := ret.Get(0).(func([]string) []*repository.VariableDefinition); ok {
		r0 = rf(vars)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*repository.VariableDefinition)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(vars)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVariablesForVarIds provides a mock function with given fields: ids
func (_m *ScopedVariableRepository) GetVariablesForVarIds(ids []int) ([]*repository.VariableDefinition, error) {
	ret := _m.Called(ids)

	var r0 []*repository.VariableDefinition
	var r1 error
	if rf, ok := ret.Get(0).(func([]int) ([]*repository.VariableDefinition, error)); ok {
		return rf(ids)
	}
	if rf, ok := ret.Get(0).(func([]int) []*repository.VariableDefinition); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*repository.VariableDefinition)
		}
	}

	if rf, ok := ret.Get(1).(func([]int) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RollbackTx provides a mock function with given fields: tx
func (_m *ScopedVariableRepository) RollbackTx(tx *pg.Tx) error {
	ret := _m.Called(tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pg.Tx) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartTx provides a mock function with given fields:
func (_m *ScopedVariableRepository) StartTx() (*pg.Tx, error) {
	ret := _m.Called()

	var r0 *pg.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func() (*pg.Tx, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *pg.Tx); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pg.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewScopedVariableRepository creates a new instance of ScopedVariableRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScopedVariableRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ScopedVariableRepository {
	mock := &ScopedVariableRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
